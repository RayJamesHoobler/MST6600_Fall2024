---
title: "sandbox exponential smoothing"
format: html
embed-resources: true
---

## Libraries

```{r}
library(tidyverse)
library(fpp3)
```

## Simple Exponential Smoothing

$$
S_t = \alpha x_t + (1 - \alpha) S_{t-1} \quad \text{for} \quad 0 \le \alpha \le 1
$$

where $S_t$ is the smoothed value at time $t$, $x_t$ is the observed value at time $t$, and $\alpha$ is the smoothing parameter.

## Double Exponential Smoothing (Holt linear)

$$
S_t = \alpha x_t + (1 - \alpha) (S_{t-1} + b_{t-1})
$$


$$
b_t = \beta (S_t - S_{t-1}) + (1 - \beta) b_{t-1}
$$

where $b_t$ is the trend component at time $t$, and $\beta$ is the trend smoothing parameter.

## Triple Exponential Smoothing (Holt-Winters)

$$
\begin{align}
S_t &= \alpha \frac{x_t}{c_t - L} + (1 - \alpha) (S_{t-1} + b_{t-1}) \\
b_t &= \beta (S_t - S_{t-1}) + (1 - \beta) b_{t-1} \\
c_t &= \gamma \frac{x_t}{S_t} + (1 - \gamma) c_{t-L}
\end{align}
$$

Where $L$ is the length of the seasonal cycle, $c_t$ is the seasonal component at time $t$, and $\gamma$ is the seasonal smoothing parameter.

## Data from NIST 

Fite below was using a single exponential smoothing model with alpha = 0.3

```{r}
sample_data <- read_table(
  "Data 	Fit
6.4 	 NA
5.6 	6.4
7.8 	6.2
8.8 	6.7
11.0 	7.3
11.6 	8.4
16.7 	9.4
15.3 	11.6
21.6 	12.7
22.4 	15.4 ", col_names = TRUE
)

sample_data
```


## Reproducing the fit


### Function for Single Exponential Smoothing

```{r}
ses_rjh <- function(x, alpha = 0.3) {
  n <- length(x)
  S_t <- numeric(n)  # Initialize vector with zeros
  
  # Set first value
  S_t[1] <- x[1]
  
  # Calculate smoothed values
  for(t in 2:n) {
    S_t[t] <- alpha * x[t] + (1 - alpha) * S_t[t-1]
  }
  
  return(S_t)
}
```

### Test the function 

```{r}
ses_rjh(sample_data$Data, alpha = 0.3)
```

### Plot the fit

```{r}
sample_data |> 
  mutate(fit2 = ses_rjh(Data, alpha = 0.3))  |> 
  ggplot(aes(x = seq_along(Data))) +
  geom_line(aes(y = Data), color = "black") +
  # geom_line(aes(y = Fit), color = "red") +
  geom_line(aes(y = fit2), color = "blue") +
  theme_light()
```


## Function for Double Exponential Smoothing

```{r}
des_rjh <- function(x, alpha = 0.3, beta = 0.3) {
  n <- length(x)
  S_t <- numeric(n)  # Initialize vector with zeros
  b_t <- numeric(n)  # Initialize vector with zeros
  
  # Set first value
  S_t[1] <- x[1]
  b_t[1] <- x[2] - x[1]
  
  # Calculate smoothed values
  for(t in 2:n) {
    S_t[t] <- alpha * x[t] + (1 - alpha) * (S_t[t-1] + b_t[t-1])
    b_t[t] <- beta * (S_t[t] - S_t[t-1]) + (1 - beta) * b_t[t-1]
  }
  
  return(S_t + b_t)
}
```

### Test the function 

```{r}
des_rjh(sample_data$Data, alpha = 0.3, beta = 0.3)
```

### Plot the fit

```{r}
sample_data |> 
  mutate(fit2 = des_rjh(Data, alpha = 0.3, beta = 0.3))  |> 
  ggplot(aes(x = seq_along(Data))) +
  geom_line(aes(y = Data), color = "black") +
  # geom_line(aes(y = Fit), color = "red") +
  geom_line(aes(y = fit2), color = "blue") +
  theme_light()
```


## Function for Triple Exponential Smoothing

```{r}
tes_rjh <- function(x, alpha = 0.3, b = 0.3, gamma = 0.3, m = 1) {
  n <- length(x)
  S_t <- numeric(n)  # Initialize vector with zeros
  b_t <- numeric(n)  # Initialize vector with zeros
  c_t <- numeric(n)  # Initialize vector with zeros
  
  # Set first value
  S_t[1] <- x[1]
  b_t[1] <- x[2] - x[1]
  c_t[1] <- x[3] - x[2]
  
  # Calculate smoothed values
  for(t in 2:n) {
    S_t[t] <- alpha * x[t] + (1 - alpha) * (S_t[t-1] + b_t[t-1])
    b_t[t] <- b * (S_t[t] - S_t[t-1]) + (1 - b) * b_t[t-1]
    c_t[t] <- gamma * (S_t[t] - S_t[t-1]) + (1 - gamma) * c_t[t-1]
  }
  
  return(S_t + b_t + c_t)
}
```  

### Test the function 

```{r}
tes_rjh(sample_data$Data, alpha = 0.3, b = 0.3, gamma = 0.3)
```

### Plot the fit

```{r}
sample_data |> 
  mutate(fit2 = tes_rjh(Data, alpha = 0.3, b = 0.3, gamma = 0.3))  |> 
  ggplot(aes(x = seq_along(Data))) +
  geom_line(aes(y = Data), color = "black") +
  # geom_line(aes(y = Fit), color = "red") +
  geom_line(aes(y = fit2), color = "blue") +
  theme_light()
```

### Seasonal Data 

```{r}
quarterly_sales <- read_table(
  "Year     Quarter     Period     Sales
90     1      1     362
90     2      2     385
90     3      3     432
90     4      4     341
91     1      5     382
91     2      6     409
91     3      7     498
91     4      8     387
92     1      9     473
92     2     10     513
92     3     11     582
92     4     12     474
93     1     13     544
93     2     14     582
93     3     15     681
93     4     16     557
94     1     17     628
94     2     18     707
94     3     19     773
94     4     20     592
95     1     21     627
95     2     22     725
95     3     23     854
95     4     24     661", col_names = TRUE
)

quarterly_sales
```

### Use the tes_rjh function to "fit" the data "by eye"

```{r}
quarterly_sales |> 
  mutate(fit2 = tes_rjh(Sales, alpha = 0.7, b = 0.3, gamma = 0.9))  |> 
  ggplot(aes(x = seq_along(Sales))) +
  geom_line(aes(y = Sales), color = "black") +
  geom_line(aes(y = fit2), color = "blue") +
  theme_light()
```

### Convert the quarterly data to a tsibble

```{r}
quarterly_sales_ts_simple <- quarterly_sales |>
  select(Sales, Period) |> 
  ts(start = c(1990, 1), frequency = 4) |> 
  as_tsibble()

quarterly_sales_ts_simple


## Multivariate
z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12)
z


tbl3 <- tibble(
  mth = rep(yearmonth("2010 Jan") + 0:8, each = 3),
  xyz = rep(c("x", "y", "z"), each = 9),
  abc = rep(letters[1:3], times = 9),
  value = rnorm(27)
)
as_tsibble(tbl3, key = c(xyz, abc))
```


### Use the ETS function from fpp3

```{r}
quarterly_sales

df_tsibble <- quarterly_sales %>%
  mutate(
    # Convert 2-digit year to 4-digit year
    Year = 1900 + Year,
    # Create proper quarter dates by converting to months (Q1=1, Q2=4, Q3=7, Q4=10)
    Month = (Quarter - 1) * 3 + 1,
    # Create the yearquarter date
    YearQuarter = yearquarter(paste(Year, Month, "01", sep = "-"))
  ) %>%
  # Select needed columns and convert to tsibble
  select(YearQuarter, Sales) %>%
  as_tsibble(
    index = YearQuarter
  )

df_tsibble <- quarterly_sales |>
  mutate(
    # Convert 2-digit year to 4-digit year
    Year = 1900 + Year,
    # Create proper quarter dates by converting to months (Q1=1, Q2=4, Q3=7, Q4=10)
    Month = (Quarter - 1) * 3 + 1,
    # Create the yearquarter date
    YearQuarter = yearquarter(paste(Year, Month, "01", sep = "-"))
  ) |>
  # Select needed columns and convert to tsibble
  select(YearQuarter, Sales) |>
  as_tsibble(
    index = YearQuarter
  )

df_tsibble
```

### Fit the data using ETS

```{r}
fit_ets <- df_tsibble |>
  model(model_ets = ETS(Sales ~ error("A") + trend("A") + season("A")))

autoplot(df_tsibble, Sales) +
  geom_line(aes(y = .fitted), data = augment(fit_ets), color = "blue")
```



